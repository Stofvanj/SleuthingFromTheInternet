<script type="text/javascript">
/* 
Sleuthing from the Internet event viewer/browser.
By Alex Wellerstein, 2012. http://nuclearsecrecy.com/ | wellerstein@gmail.com
Version 0.5 - 8/13/2012
*/

/* Things you might want to change */
var json_src = "<%= url('/events.json?limit=500') %>"; //JSON data source
var defZoomIn = 8; //default "max" zoom-in value
var markerSize = 1; // set marker size constant

//set up some global variables
var markers = []; //array for markers
var markerInfo = []; //array for marker "details"
var infowindow; //marker details window
var url_vars; //URLs passed via the query string 
var sources = []; //sources of data
var dataMaxDepth = 0; //max depth
var dataMaxMag = 0; //max magnitude
var t = []; //array that holds marker icons

//style the map -- gray high contrast
var GmapGrayStyle = [
  {
	featureType: "water",
	stylers: [
	  { color: "#343434" }
	]
  },{
	featureType: "landscape",
	stylers: [
	  { color: "#808080" }
	]
  },{
	featureType: "poi",
	stylers: [
	  { color: "#808080" }
	]
  },{
	featureType: "administrative",
	stylers: [
	  { color: "#808080" }
	]
  },{
	featureType: "administrative",
	elementType: "geometry.stroke",
	stylers: [
	  { color: "#bfbfbf" }
	]
  },{
	featureType: "administrative.province",
	elementType: "labels.text",
	stylers: [
	  { visibility: "off" }
	]
  },{
	featureType: "administrative",
	elementType: "labels.text.fill",
	stylers: [
	  { color: "#ffffff" }
	]
  },{
	elementType: "labels.text.stroke",
	stylers: [
	  { color: "#808080" }
	]
  },{
	featureType: "water",
	elementType: "labels.text",
	stylers: [
	  { color: "#808080" },
	  { visibility: "off" }
	]
  },{
	featureType: "road.highway",
	stylers: [
	  { visibility: "off" }
	]
  },{
  }
];

//Basic initialization function that runs after load of body element
function init() {
	var deviation;
	var count = 0;
	var list = "";
	// ensure we have a console to write to
	if (!console) console = {log:function(){}};
	
	//init the map
	map = new google.maps.Map(document.getElementById('theMap'), {
	  'zoom': 2,
	  'minZoom':2,
	  'center': new google.maps.LatLng(35,0),
	  'mapTypeId': google.maps.MapTypeId.ROADMAP,
	  'mapTypeControl':false,
	  'zoomControl':true,
	  'panControl':true,
	  'panControlOptions': {
	    position:google.maps.ControlPosition.TOP_RIGHT
	  },
	  'zoomControlOptions': {
	    position:google.maps.ControlPosition.TOP_RIGHT
	  },
	  'streetViewControl':false
	});

	//gray by default
	map.setOptions({styles: GmapGrayStyle});
	
	//set up our markers
	t[1] = new google.maps.MarkerImage('lib/target-1.png',new google.maps.Size(4, 4),new google.maps.Point(0,0),new google.maps.Point(2, 2));
	t[2] = new google.maps.MarkerImage('lib/target-2.png',new google.maps.Size(20,20),new google.maps.Point(0,0),new google.maps.Point(10, 10));
	t[3] = new google.maps.MarkerImage('lib/target-3.png',new google.maps.Size(30,30),new google.maps.Point(0,0),new google.maps.Point(15, 15));
	t[4] = new google.maps.MarkerImage('lib/target-4.png',new google.maps.Size(40,40),new google.maps.Point(0,0),new google.maps.Point(20, 20));
	
	google.maps.event.addListener(map, 'zoom_changed', function() {
			zoomLevel = map.getZoom();
	});

	//this is supposed to set things up to automatically recenter and resize
	//when the window does, but doesn't work.  should fix later.
	if (window.attachEvent) {
	  window.attachEvent("onresize", function() {this.map.onResize()});
	  window.attachEvent("onload", function() {this.map.onResize()});
	} else if (window.addEventListener) {
	  window.addEventListener("resize",
				  function() {this.map.onResize()}, false);
	  window.addEventListener("load",
				  function() {this.map.onResize()}, false);
	}
	
	google.maps.event.addListenerOnce(map, 'idle', function(){
	  var copyrightAttr = $('#theMap div div[style*="z-index: 1000001;"]');
	  //copyrightAttr.css('bottom', copyrightAttr.height());
	  copyrightAttr.css('top', '0');
	  copyrightAttr.attr('id', 'copyrightAttr');
	  
	  var googleAttr = $('#theMap div div[style*="z-index: 1000000;"]');
	  googleAttr.css('top', copyrightAttr.height());
	  googleAttr.css('right', '0');
	  googleAttr.attr('id', 'googleAttr');
	  
	  var controlHeight = googleAttr.height() + copyrightAttr.height();
	  
	  var controls = $('#theMap div div div[style^="cursor"]').parent();
	  //controls.css('top', controlHeight);
	  controls.attr('id', 'controls');
	});
	
	//get the data	
	$.getJSON(json_src, function(data) {
		sources[0] = "N/A";
		clearmarkers();
		//process it once we have it
		$.each(data, function(key, val) {
		      if(val.events.mag>dataMaxMag) dataMaxMag = val.events.mag;
		      if(val.events.depth>dataMaxDepth) dataMaxDepth = val.events.depth;
		      if(jQuery.inArray(val.events.source, sources)<0) sources.push(val.events.source);
		      
		      // add markers
		      dateObj = getDateFromTime(val.events.time);
		      deviation = getDeviationFromDate(dateObj);
		      
		      addMarker(val.events.latitude,val.events.longitude, val.events, markerSize);
		      markerInfo.push(val.events);
		      
		      list+="<tr id=\"event" + key + "\">";
		      list+="<td><a href='#' title='Show details of event' onclick='getinfo("+(markers.length-1)+",false);return false;'>&#171;</a> <a href='#' title='Show details of event and zoom in on it' onclick='getinfo("+(markers.length-1)+",true);return false;'>&#8857;</a></td>";
		      list+="<td>"+dateObj.getUTCFullYear()+"-"+(dateObj.getUTCMonth()<9?"0"+(dateObj.getUTCMonth()+1):(dateObj.getUTCMonth()+1))+"-"+(dateObj.getUTCDate()<10?"0"+dateObj.getUTCDate():dateObj.getUTCDate())+"</td>"
		      list+="<td><a title='Click to see original event information from source' href='http://"+val.events.source + val.events.url + "' target='_blank'>"+val.events.source.replace("earthquake.","").replace("www.","")+"</a></td>";
		      list+="<td>"+val.events.depth+"</td>";		
		      list+="<td>"+val.events.mag+"</td>";
		      list+="<td>"+deviation+"</td>";
		      list+="<td><a title='Open a new window with Google Maps zoomed in on the location of this event'  href='http://maps.google.com/maps?t=h&q=loc:"+ val.events.latitude+","+val.events.longitude+"&z=8' target='_blank'><img src='lib/external-ltr.png'/></a></td>";
		      list+="</tr>";
		      
		      count++;
		});
	
        // Add all elements to the table
        /*document.getElementById("list").innerHTML = "<table id='event_table' class='tablesorter'><thead><tr><th></th><th>Date</th><th>Source</th><th>Depth</th><th>Mag</th><th>Dev</th><th>Loc</th></thead>"+list+"</table>";
  
        //update the UI elements, including sliders
        document.getElementById("maxDepth").value = dataMaxDepth;
        document.getElementById("maxMag").value = dataMaxMag;
  
        $( "#rangeMag" ).slider({
            range: "min",
            value: dataMaxMag,
            min: 0,
            max: dataMaxMag,
            step: .1,
            slide: function( event, ui ) {
                $( "#maxMag" ).val(ui.value );
                el = document.getElementById('maxMag');
                ev = document.createEvent('Event');
                ev.initEvent('change', true, false);
                el.dispatchEvent(ev);
            }
        });
        $( "#maxMag" ).val($( "#rangeMag" ).slider( "value" ) );
         
        $( "#rangeDepth" ).slider({
            range: "min",
            value: dataMaxDepth,
            min: 0,
            max: dataMaxDepth,
            step: .01,
            slide: function( event, ui ) {
                $( "#maxDepth" ).val(ui.value );
                el = document.getElementById('maxDepth');
                ev = document.createEvent('Event');
                ev.initEvent('change', true, false);
                el.dispatchEvent(ev);
            }
        });
        $( "#maxDepth" ).val($( "#rangeDepth" ).slider( "value" ) );
  
        $( "#rangeDev" ).slider({
            range: "min",
            value: dataMaxDepth,
            min: 0,
            max: 30,
            step: 1,
            slide: function( event, ui ) {
                $( "#minDev" ).val(ui.value );
                el = document.getElementById('maxDepth');
                ev = document.createEvent('Event');
                ev.initEvent('change', true, false);
                el.dispatchEvent(ev);
            }
        });
        $("#minDev" ).val($( "#rangeDev" ).slider( "value" ) );
  
        for(var i in sources) {
            document.getElementById("sourceSelect").options[i] = new Option(sources[i],[i]);            
        }
  
        //if we have URL variables, then update UI based on them
        url_vars = getUrlVars();
        if(url_vars["dp"]) {
            document.getElementById("maxDepth").value = url_vars["dp"];
            $("#rangeDepth").slider("value", url_vars["dp"]);
        }
        if(url_vars["mg"]) {
            document.getElementById("maxMag").value = url_vars["mg"];
            $("#rangeMag").slider("value", url_vars["mg"]);
        }
        if(url_vars["dv"]) {
            document.getElementById("minDev").value = url_vars["dv"];
            $("#rangeDev").slider("value", url_vars["dv"]);
        }
        if(url_vars["src"]) {
            document.getElementById("sourceSelect").value = url_vars["src"];
        }
        if(url_vars["zm"]) {
            map.setZoom(parseInt(url_vars["zm"]));      
        }
        if(url_vars["ll"]) {
            var ll = url_vars["ll"].split(",");
            map.panTo(new google.maps.LatLng(ll[0],ll[1]));
        }*/
	
        //refresh all markers and whatnot
        //refreshdata();
         
        //center view
        var latlngbounds = new google.maps.LatLngBounds();
        map.setCenter(latlngbounds.getCenter(markers));
         
        //make the table sortable
        //if ($("#event_table").find("tr").size() > 1) {
        //  $("#event_table").tablesorter();
        //}
    })
    .error(function(jqXHR, textStatus, errorThrown) { document.getElementById("status").innerHTML = "<div class='ui-state-error'>Error loading data.</div>";}); 
    
    //if close button is clicked
    $('.window .close').click(function (e) {
	//Cancel the link behavior
	e.preventDefault();
	$('#mask, .window').hide();
    });     
     
    //if mask is clicked
    $('#mask').click(function () {
	$(this).hide();
	$('.window').hide();
    });
}

//clears out all markers and info windows
function clearmarkers() {
  if (markers) {
    for (var i = 0; i < markers.length; i++ ) {
      markers[i].setMap(null);
    }
  }
  markers = [];
  markerInfo = [];
}

//returns URL query variables
function getUrlVars(url) {
    var vars = {};
    if(!url) url=window.location.href;
    var parts = url.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {
        vars[key] = value;
    });
    return vars;
}
 
function getDateFromTime(time) {
  var dateObj = new Date(0);
  dateObj.setUTCMilliseconds(Date.parse(time));
  return dateObj;
}
 
function getDeviationFromDate(dateObj) {
  var deviation;
  
  if((60-dateObj.getMinutes())<dateObj.getMinutes()) {
    deviation=(60-dateObj.getMinutes());
  } else {
    deviation=dateObj.getMinutes();
  }
  
  return deviation;
}

//main "refresh" function that updates displayed data based on settings
function refreshdata() {
    var bounced;
    var maxDepth;
    var maxMag;
    var minDev;
    var deviation;
    var visible = 0;
    maxDepth = document.getElementById("maxDepth").value;
    maxMag = document.getElementById("maxMag").value;
    minDev = document.getElementById("minDev").value;
    sourceLimit = document.getElementById("sourceSelect").value;
     
    // here we need to iterate through markers and get turn on ones in the
    // view criteria
    for (var i = 0; i < markers.length; i++) {
      bounced = false;
       
      if(maxDepth!="") { if(fmtDepth(markerInfo[i].depth)>maxDepth) bounced=true; };
      if(maxMag!="") { if(markerInfo[i].mag>maxMag) bounced=true; };
 
      dateObj = getDateFromTime(markerInfo[i].time)
      deviation = getDeviationFromDate(dateObj);
 
      if(sourceLimit>0) { if(markerInfo[i].source != sources[sourceLimit]) bounced = true; }
      if(minDev!="") { if(deviation>minDev) bounced = true; };
       
      if (bounced) {
        markers[i].setVisible(false);
        $("#event"+i).hide();
      } else {
        markers[i].setVisible(true);
        $("#event"+i).show();
        visible++;
      }
    }
     
    //udpate the permalink
    maxDepth = document.getElementById("maxDepth").value;
    maxMag = document.getElementById("maxMag").value;
    minDev = document.getElementById("minDev").value;
    sourceLimit = document.getElementById("sourceSelect").value;
    document.getElementById("permalink").innerHTML = "<a title='Permanent link to the chosen settings' href='"+[location.protocol, '//', location.host, location.pathname].join('')+"?dp="+maxDepth+"&mg="+maxMag+"&dv="+minDev+"&src="+sourceLimit+"&ll="+map.getCenter().toUrlValue()+"&zm="+map.getZoom()+"'>permalink to settings</a> - <a href='#dialog' name='modal'>subscribe</a>";
     
    // Refresh subscription options
    $( "#maxDepthSubscribe").text($( "#rangeDepth" ).slider( "value" ));
    $( "#maxMagSubscribe").text($( "#rangeMag" ).slider( "value" ));
    $( "#hourDeviationSubscribe").text($( "#rangeDev" ).slider( "value" ));
    $( "#sourceLimitSubscribe").text(sources[document.getElementById("sourceSelect").value])
 
    //setup subscribe modal dialog - this is horribly inefficient
    $('a[name=modal]').click(function(e) {
        //Cancel the link behavior
        e.preventDefault();
        //Get the A tag
        var id = $(this).attr('href');
      
        //Get the screen height and width
        var maskHeight = $(document).height();
        var maskWidth = $(window).width();
      
        //Set height and width to mask to fill up the whole screen
        $('#mask').css({'width':maskWidth,'height':maskHeight});
          
        //transition effect     
        $('#mask').fadeIn(1000);    
        $('#mask').fadeTo("slow",0.8);  
      
        //Get the window height and width
        var winH = $(window).height();
        var winW = $(window).width();
            
        //Set the popup window to center
        $(id).css('top',  winH/2-$(id).height()/2);
        $(id).css('left', winW/2-$(id).width()/2);
      
        //transition effect
        $(id).fadeIn(2000); 
      
    });
     
    //if close button is clicked
    $('.window .close').click(function (e) {
        //Cancel the link behavior
        e.preventDefault();
         
        $('#mask').hide();
        $('.window').hide();
    });     
     
    //if mask is clicked
    $('#mask').click(function () {
        $(this).hide();
        $('.window').hide();
    });         
 
    $(window).resize(function () {
      
        var box = $('#boxes .window');
  
        //Get the screen height and width
        var maskHeight = $(document).height();
        var maskWidth = $(window).width();
       
        //Set height and width to mask to fill up the whole screen
        $('#mask').css({'width':maskWidth,'height':maskHeight});
                
        //Get the window height and width
        var winH = $(window).height();
        var winW = $(window).width();
 
        //Set the popup window to center
        box.css('top',  winH/2 - box.height()/2);
        box.css('left', winW/2 - box.width()/2);
      
    });
 
 
    //update the table output 
    document.getElementById("status").innerHTML = visible+" events shown";
    if($("#event_table").find("tr").size() > 1) {
      $("#event_table").tablesorter();
    }
}

//code that adds a marker to Google Maps
function addMarker(lat,lng,d,size) {
    var dateObj = new Date(0);
    dateObj.setUTCMilliseconds(Date.parse(d.time));
     
    markers.push(new google.maps.Marker({
      position: new google.maps.LatLng(lat,lng),
      visible: false,
      map: map,
      draggable: false,
      icon: t[parseInt(size)],
      title: dateObj.toGMTString() + ", depth: " + d.depth+", mag: "+ d.mag
    }));
  
    var lastmarker = markers[markers.length-1];
  
    //if you click on the marker, you see the details
    google.maps.event.addListener(lastmarker, "click", function() {
        var detail = "";
        detail+= "<span class='detailinfo'>Source:</span> <a href='http://" + d.source + d.url + "' target='_blank'>"+d.source+"</a><br>";
        detail+= "<span class='detailinfo'>Lat/Lng:</span> <a href='http://maps.google.com/maps?t=h&q=loc:"+ d.latitude +","+d.longitude+"&z=8' target='_blank'>" + d.latitude + ", " + d.longitude+"</a><br>";
        detail+= "<span class='detailinfo'>Date/time:</span> " + dateObj.toGMTString() + "<br>";
        detail+=" <span class='detailinfo'>Deviation from hour: </span>";
  
        if((60-dateObj.getMinutes())<dateObj.getMinutes()) {
            detail+=(60-dateObj.getMinutes());
        } else {
            detail+=dateObj.getMinutes();
        }
        detail +=" minutes<br>";
  
        detail+= "<span class='detailinfo'>Depth:</span> " + d.depth + "<br>";
        detail+= "<span class='detailinfo'>Magnitude:</span> " + d.mag + "<br>";
  
         
        if(infowindow) infowindow.setMap(null);
        infowindow = new google.maps.InfoWindow({
            content: detail
        });
        infowindow.open(map,lastmarker);
    });
    //if you double-click, it centers and zooms in
    google.maps.event.addListener(lastmarker, 'dblclick', function(e) {
        map.setCenter(e.latLng);
        map.setZoom(defZoomIn);
    });
}

//popups up a little information window for a given marker. will zoom in if told to.
function getinfo(markerID, zoom) {
	var d = markerInfo[markerID];
	var dateObj = new Date(0);
	dateObj.setUTCMilliseconds(Date.parse(d.time));
		var detail = "";
		detail+= "<span class='detailinfo'>Source:</span> <a href='http://"+ d.source + d.url + "' target='_blank'>"+d.source+"</a><br>";
		detail+= "<span class='detailinfo'>Lat/Lng:</span> <a href='http://maps.google.com/maps?t=h&q=loc:"+ d.latitude+","+d.longitude+"&z=8' target='_blank'>" + d.latitude + ", " + d.longitude+"</a><br>";
		detail+= "<span class='detailinfo'>Date/time:</span> " + dateObj.toGMTString() + "<br>";
		detail+=" <span class='detailinfo'>Deviation from hour: </span>";
 
		if((60-dateObj.getMinutes())<dateObj.getMinutes()) {
			detail+=(60-dateObj.getMinutes());
		} else {
			detail+=dateObj.getMinutes();
		}
		detail +=" minutes<br>";
 
		detail+= "<span class='detailinfo'>Depth:</span> " + d.depth + "<br>";
		detail+= "<span class='detailinfo'>Magnitude:</span> " + d.mag + "<br>";
 
		if(infowindow) infowindow.setMap(null);
		infowindow = new google.maps.InfoWindow({
			content: detail
		});
		infowindow.open(map,markers[markerID]);
		if(zoom) {
			map.setCenter(markers[markerID].getPosition());
			map.setZoom(defZoomIn);
		}
}
 
function verifyEmail() {
  var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  
  if(re.test($('input[name=email]').val())) {
    $('span[id=emailOK]').html('<a class="btn btn-small btn-success"><i class="icon-ok icon-white"></i></a>');
    return true;
  } else {
    $('span[id=emailOK]').html('<a class="btn btn-small btn-danger"><i class="icon-remove icon-white"></i></a>');
    return false;
  }
}

document.body.onload = init;

</script>

<div id="theMap"></div>
